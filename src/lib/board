#!/bin/bash
## ==============================================
## @file: board
base=`basename "$0"`

items=()
prev_positions=()
body_count=1

## ----------------------------------------------
## @name clear_screen()
## 
## Clears the screen
##
## ----------------------------------------------
function clear_screen() {
    for i in $(seq 2 $ROWS)
    do
        set_position $i 0
        erase_to_end
    done
}

## ----------------------------------------------
## @name init_screen() 
## 
## Initializes the screen to the size of 
## rows and columns, with a border
##
## ----------------------------------------------
function init_screen() {
    for i in $(seq 7 $COLS)
    do
        echo -n "-"
    done
    echo
    for i in $(seq 3 $ROWS)
    do
        echo -n "|"
        for i in $(seq 9 $COLS)
        do
            echo -n " "
        done
        echo "|"
    done
    for i in $(seq 7 $COLS)
    do
        echo -n "-"
    done
    direction=4

    for i in $(seq 1 5)
    do
        get_random_location y x
        set_position $y $x
        LOG "item: $y $x" $base "INFO"
        items+=("$y,$x")
        echo -ne "$item"
        #echo -ne "$y,$x"
    done
    cursor_home
    IFS=","
}

## ----------------------------------------------
## @name is_eaten()
##
## Determines if an item was eaten
##
## @param flag to be returned if true
## @param x the x coordinate of the snake
## @param y the y coordinate of the snake
## @return true if the item and the snake occupy the same space
##
## ----------------------------------------------
function is_eaten() {
    local __return=$1
    local y=$2
    local x=$3
    local flag='0'
    #LOG "$y $x" $base "DEBUG"
    for k in "${items[@]}"; do
        read -ra coord <<< "$k"
        y_coord="${coord[@]:0:1}"
        x_coord="${coord[@]:1:2}"
        if [[ "$x" -eq "$x_coord" ]] && [[ "$y" -eq "$y_coord" ]]; then
            LOG eaten $base INFO
            flag=1
            ((body_count+=2))
        fi
    done
    eval $__return="'$flag'"
}

## ----------------------------------------------
## @name change_direction()
##
## Changes the direction of the snake. The snake cannot
## reserve direction
##
## ----------------------------------------------
function change_direction() {
    local new_direction=$1
    if [[ $new_direction == 1 ]] && [[ $direction != 3 ]]; then
        direction=$new_direction
    elif [[ $new_direction == 2 ]] && [[ $direction != 4 ]]; then
        direction=$new_direction
    elif [[ $new_direction == 3 ]] && [[ $direction != 1 ]]; then
        direction=$new_direction
    elif [[ $new_direction == 4 ]] && [[ $direction != 2 ]]; then
        direction=$new_direction
    fi
}

## ----------------------------------------------
## @name refresh_board()
##
## refreshes the board on every tick moving the 
## snake to the new location
##
## ----------------------------------------------
function refresh_board() {
    (sleep $delay && kill -ALRM $$) &
    #LOG "prev $prev_pos_y $prev_pos_x" $base "DEBUG"
    #prev_positions+=("$prev_pos_y $prev_pos_x")
    set_position $prev_pos_y $prev_pos_x
    echo -ne " "
    #LOG "curr $pos_y $pos_x" $base "DEBUG"
    is_eaten flag $pos_y $pos_x
    set_position $pos_y $pos_x
    echo -ne "$head"
    prev_pos_x=$pos_x
    prev_pos_y=$pos_y
    if [ $direction = 4 ]; then
        ((pos_x-=1))
    elif [ $direction = 2 ]; then
        ((pos_x+=1))
    elif [ $direction = 1 ]; then
        ((pos_y-=1))
    elif [ $direction = 3 ]; then
        ((pos_y+=1))
    fi
    cursor_home
}

## ----------------------------------------------
## @name quit()
##
## prints to the screen a goodbye message, show cursor, deletes log file
##
## ----------------------------------------------
function quit() {
    clear_screen
    UP $(($ROWS/2))
    set_color "GREEN"
    FORWARD $(($COLS/2-5))
    echo "Goodbye"
    DOWN $(($ROWS/2))
    show_cursor
    clear_logger
    stty echo
    exit 0
}

## END board
## ==============================================
